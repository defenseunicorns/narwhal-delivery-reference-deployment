name: Run E2E Tests

description: Run E2E Tests

inputs:
  token:
    description: Personal Access Token (PAT) used to update the comment
    required: true
  role-to-assume:
    description: The AWS IAM Role to assume in the target account
    required: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: true
  test-to-run:
    description: Which test to run. See the "VALID_TESTS" env var in this action for the list of valid inputs.
    required: true

runs:
  using: composite
  steps:
    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Validate test-to-run input
      shell: bash -e -o pipefail {0}
      env:
        # When more tests are added, add them to this list as space-delimited strings. Example: VALID_TESTS: "foo bar baz"
        VALID_TESTS: "on-prem-lite"
      run: |
        if [[ ! " $VALID_TESTS " =~ " ${{ inputs.test-to-run }} " ]]; then
          echo "Invalid test-to-run input: '${{ inputs.test-to-run }}'. Valid inputs are: $VALID_TESTS."
          exit 1
          fi

    - name: Init gopath cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go"
        key: "gopath|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

    - name: Init gobuild cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go-build"
        key: "gobuild|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

    - name: Init zarf cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.zarf-cache"
        key: "zarf|${{ hashFiles('.tool-versions') }}"

    - name: Init docker cache
      id: init-docker-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/docker"
        key: "docker|${{ hashFiles('.env') }}"

    - name: Docker save build harness
      if: steps.init-docker-cache.outputs.cache-hit != 'true'
      shell: bash -e -o pipefail {0}
      run: |
        make _docker-save-build-harness

    - name: Load build harness
      shell: bash -e -o pipefail {0}
      run: |
        make _docker-load-build-harness

    - name: Get Terraform version from .tool-versions
      id: get_tf_version
      shell: bash -e -o pipefail {0}
      run: echo "tf_version=$(grep 'terraform ' .tool-versions)" >> $GITHUB_OUTPUT

    - name: Init Terraform Cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
        key: "${{ runner.os }}-terraform-plugins|${{ steps.get_tf_version.outputs.tf_version }}|${{ hashFiles('examples/complete/providers.tf') }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        aws-region: ${{ inputs.region }}
        # 21600 seconds == 6 hours
        role-duration-seconds: 21600

    - name: "Run E2E tests"
      shell: bash -o pipefail {0}
      # Stand up the deployment, then run the test, then clean up. Fail the step if any of the commands fail.
      run: make _test-on-prem-lite

    - name: "Fix cache permissions"
      shell: bash -e -o pipefail {0}
      run: make _fix-cache-permissions

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
