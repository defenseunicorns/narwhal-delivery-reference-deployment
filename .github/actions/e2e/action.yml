name: Run E2E Tests

description: Run E2E Tests

inputs:
  application_id:
    description: 'The GitHub App ID'
    required: true
  application_private_key:
    description: 'The GitHub App private key'
    required: true
  role-to-assume:
    description: The AWS IAM Role to assume in the target account
    required: true
  region:
    description: Any valid region in the target account. Only used to get AWS creds, not for the test itself.
    required: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: true
  test-to-run:
    description: Which test to run. See the "VALID_TESTS" env var in this action for the list of valid inputs.
    required: true

runs:
  using: composite
  steps:
    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Validate test-to-run input
      shell: bash -e -o pipefail {0}
      env:
        # When more tests are added, add them to this list as space-delimited strings. Example: VALID_TESTS: "foo bar baz"
        VALID_TESTS: "on-prem-lite"
      run: |
        if [[ ! " $VALID_TESTS " =~ " ${{ inputs.test-to-run }} " ]]; then
          echo "Invalid test-to-run input: '${{ inputs.test-to-run }}'. Valid inputs are: $VALID_TESTS."
          exit 1
          fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        aws-region: ${{ inputs.region }}
        # 21600 seconds == 6 hours
        role-duration-seconds: 21600

    - name: "Run test"
      shell: bash -o pipefail {0}
      run: make +scriptwrap TARGET=_test-${{ inputs.test-to-run }}

    - name: "Fix cache permissions"
      shell: bash -e -o pipefail {0}
      run: make +scriptwrap TARGET=_fix-cache-permissions

    # this is because the github installation token expires after an hour, non-configurable, sometimes the tests take longer than an hour
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app
    - name: "Get token again"
      id: get_installation_token_again
      uses: peter-murray/workflow-application-token-action@v2
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
