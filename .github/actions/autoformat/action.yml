name: Autoformat

description: Autoformat code using pre-commit

inputs:
  token:
    description: Personal Access Token (PAT)
    required: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: true

runs:
  using: composite
  steps:
    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Init gopath cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go"
        key: "gopath|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

    - name: Init gobuild cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/go-build"
        key: "gobuild|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

    - name: Init zarf cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.zarf-cache"
        key: "zarf|${{ hashFiles('.tool-versions') }}"

    - name: Init docker cache
      id: init-docker-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/docker"
        key: "docker|${{ hashFiles('.env') }}"

    - name: Docker save build harness
      if: steps.init-docker-cache.outputs.cache-hit != 'true'
      shell: bash -e -o pipefail {0}
      run: |
        make _docker-save-build-harness

    - name: Load build harness
      shell: bash -e -o pipefail {0}
      run: |
        make _docker-load-build-harness

    - name: Get Terraform version from .tool-versions
      id: get_tf_version
      shell: bash -e -o pipefail {0}
      run: echo "tf_version=$(grep 'terraform ' .tool-versions)" >> $GITHUB_OUTPUT

    - name: Init Terraform Cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
        key: "${{ runner.os }}-terraform-plugins|${{ steps.get_tf_version.outputs.tf_version }}|${{ hashFiles('examples/complete/providers.tf') }}"

    - name: Update files with automatic formatting tools
      shell: bash -e -o pipefail {0}
      run: |
        # Make it always return 0 since changing files is considered a failure by pre-commit
        make +scriptwrap TARGET=_autoformat || true

    - name: Fix cache permissions
      shell: bash -e -o pipefail {0}
      run: make +scriptwrap TARGET=_fix-cache-permissions

    # Use the GraphQL API to commit changes, so we get automatic commit signing
    # The REST contents API can't be used as easily because it only supports making single file commits
    - name: Commit and push changes
      shell: bash
      env:
       GITHUB_TOKEN: ${{ github.token }}
      run: |
       set -euo pipefail
       additions=()
       removed=()
       while IFS= read -r -d $'\0' status_line; do
           filename="${status_line:3}"
           git_status="${status_line:0:2}"
           if [ "$git_status" = "D " ]; then
               removed+=("$filename")
           else
               additions+=("$filename")
           fi
       done < <(git status --porcelain=v1 -z)
       if [ "${#additions[@]}" -eq 0 ] ; then
         echo "No files updated, skipping commit"
         exit 0
       fi
       commitMessage="chore: apply automatic changes"
       # for now, we ignore $removed files, but they could be handled similarly (it's just harder to send two lists of positional input files into jq)
       # jq's iteration over inputs will skip over files with 0 lines (empty files)
       jq \
         --null-input \
         --raw-input \
         --arg repositoryNameWithOwner "$GITHUB_REPOSITORY" \
         --arg branchName "$GITHUB_REF_NAME" \
         --arg expectedHeadOid "$GITHUB_SHA" \
         --arg commitMessage "$commitMessage" \
         '
       {
         "query": "mutation ($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { url } } }",
         "variables": {
           "input": {
             "branch": {
               "repositoryNameWithOwner": $repositoryNameWithOwner,
               "branchName": $branchName
             },
             "message": {
               "headline": $commitMessage
             },
             "fileChanges": {
               "additions": [reduce inputs as $line ({}; .[input_filename] += [$line]) | map_values(join("\n")) | to_entries[] | {path: .key, contents: .value | @base64}]
             },
             "expectedHeadOid": $expectedHeadOid
           }
         }
       }' "${additions[@]}" | curl https://api.github.com/graphql \
         --silent \
         --fail-with-body \
         --oauth2-bearer "$(gh auth token)" \
         --data @-

#    - name: Commit and push changes
#      uses: stefanzweifel/git-auto-commit-action@v4
#      with:
#        skip_checkout: true

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
